version: 2

jobs:
  # Build & Deploy against development backend
  "build-dev":
    docker:
      - image: docker:17.11.0-ce-git
        environment:
          ENV: $BASH_ENV
    steps:
      # Initialization.
      - checkout
      - setup_remote_docker
      - run:
          name: Installation of build dependencies.
          command: |
            apk update
            apk add --no-cache bash openssl curl
            apk upgrade

      # Restoration of node_modules from cache.
      - restore_cache:
          key: docker-node-modules-v3-{{ checksum "package-lock.json" }}

      # Build of Docker image.
      - run:
          name: Build of Docker image
          command: ./build.sh

      # Caching node modules.
      - save_cache:
          key: docker-node-modules-v3-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

      # Deployment.
      - run:
          name: Installing AWS client
          command: |
            apk add --no-cache jq py-pip sudo
            sudo pip install awscli --upgrade
      - deploy:
          name: Running MasterScript
          command: |
            git clone --branch v1.3 https://github.com/topcoder-platform/tc-deploy-scripts ../buildscript
            cp ./../buildscript/master_deploy.sh .
            cp ./../buildscript/buildenv.sh .
            cp ./../buildscript/awsconfiguration.sh .
            ./awsconfiguration.sh DEV
            source awsenvconf            
            ./buildenv.sh -e DEV -b dev_communityapp_deployvar
            source buildenvvar
            ./master_deploy.sh -d ECS -e DEV -t latest -s dev_communityapp_taskvar -i communityapp
  # Build & Deploy against testing backend
  "build-test":
    docker:
      - image: docker:17.11.0-ce-git
        environment:
          ENV: $BASH_ENV
    steps:
      # Initialization.
      - checkout
      - setup_remote_docker
      - run:
          name: Installation of build dependencies.
          command: |
            apk update
            apk add --no-cache bash openssl curl
            apk upgrade

      # Restoration of node_modules from cache.
      - restore_cache:
          key: docker-node-modules-v3-{{ checksum "package-lock.json" }}

      # Build of Docker image.
      - run:
          name: Build of Docker image
          command: ./build.sh

      # Caching node modules.
      - save_cache:
          key: docker-node-modules-v3-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

      # Deployment.
      - run:
          name: Installing AWS client
          command: |
            apk add --no-cache jq py-pip sudo
            sudo pip install awscli --upgrade
      - deploy:
          name: Running MasterScript
          command: |
            git clone --branch v1.3 https://github.com/topcoder-platform/tc-deploy-scripts ../buildscript
            cp ./../buildscript/master_deploy.sh .
            cp ./../buildscript/buildenv.sh .
            cp ./../buildscript/awsconfiguration.sh .
            ./awsconfiguration.sh DEV
            source awsenvconf            
            ./buildenv.sh -e DEV -b test_communityapp_deployvar
            source buildenvvar
            ./master_deploy.sh -d ECS -e DEV -t latest -s test_communityapp_taskvar -i communityapp
  # Build & Deploy against testing backend
  "build-prod-beta":
    docker:
      - image: docker:17.11.0-ce-git
        environment:
          ENV: $BASH_ENV
    steps:
      # Initialization.
      - checkout
      - setup_remote_docker
      - run:
          name: Installation of build dependencies.
          command: |
            apk update
            apk add --no-cache bash openssl curl
            apk upgrade

      # Restoration of node_modules from cache.
      - restore_cache:
          key: docker-node-modules-v3-{{ checksum "package-lock.json" }}

      # Build of Docker image.
      - run:
          name: Build of Docker image
          command: ./build.sh

      # Caching node modules.
      - save_cache:
          key: docker-node-modules-v3-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

      # Deployment.
      - run:
          name: Installing AWS client
          command: |
            apk add --no-cache jq py-pip sudo
            sudo pip install awscli --upgrade
      - deploy:
          name: Running MasterScript
          command: |
            git clone --branch v1.3 https://github.com/topcoder-platform/tc-deploy-scripts ../buildscript
            cp ./../buildscript/master_deploy.sh .
            cp ./../buildscript/buildenv.sh .
            cp ./../buildscript/awsconfiguration.sh .
            ./awsconfiguration.sh PROD
            source awsenvconf               
            ./buildenv.sh -e PROD -b beta_communityapp_deployvar
            source buildenvvar
            ./master_deploy.sh -d ECS -e PROD -t latest -s beta_communityapp_taskvar -i communityapp
  # Build & Deploy against production backend
  "build-prod":
    docker:
      - image: docker:17.06.1-ce-git
    steps:
      # Initialization.
      - checkout
      - setup_remote_docker
      - run:
          name: Installation of build dependencies.
          command: apk add --no-cache bash

      # Restoring node_modules from the previous build.
      - restore_cache:
          key: docker-node-modules-v3-{{ checksum "package-lock.json" }}

      # Building.
      - run:
          name: Build of Docker image
          command: ./build.sh production

      - save_cache:
          key: docker-node-modules-v3-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

      # Deployment.
      - run:
          name: Installing AWS client
          command: |
            apk add --no-cache jq py-pip sudo
            sudo pip install awscli --upgrade

      - deploy:
          command: ./deploy.sh PROD $CIRCLE_SHA1

  # Test job for the cases when we do not need deployment. It just rapidly
  # installs (updates) app dependencies, and runs tests (ESLint, Stylelint,
  # Jest unit-tests).
  test:
    docker:
      - image: circleci/node:8.11.1
    steps:
      - checkout
      - restore_cache:
          key: test-node-modules-{{ checksum "package-lock.json" }}
      - run: npm install
      - save_cache:
          key: test-node-modules-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run: npm test

workflows:
  version: 2
  build:
    jobs:
      # Development builds are executed on "new-develop" branch only.
      - "build-dev":
          context : org-global
          filters:
            branches:
              only: 
                - develop
      # This is alternate dev env for parallel testing
      - "build-test":
          context : org-global
          filters:
              branches:
                only:
                  - hot-fixes
                  - develop_masterscript
      # This is beta env for production soft releases
      - "build-prod-beta":
          context : org-global
          filters:
            branches:
              only:
                - hot-fixes
                - develop
                - develop_masterscript
      # Production builds are exectuted only on tagged commits to the
      # master branch.
      - "build-prod":
          filters:
            branches:
              only:
                - master
      # Simple testing is executed for any branch other than "develop" and
      # "master".
      - test:
          filters:
            branches:
              ignore:
                - develop
